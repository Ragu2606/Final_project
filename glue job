#This glue job will proces sales data and store it in s3 as a single CSV file
import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job
from awsglue.dynamicframe import DynamicFrame
from pyspark.sql.functions import col, to_date, date_format, when

# Get the job name from the arguments
args = getResolvedOptions(sys.argv, ['JOB_NAME'])
sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args['JOB_NAME'], args)

# Load data from the Glue Data Catalog
datasource0 = glueContext.create_dynamic_frame.from_catalog(
    database="dmart",
    table_name="sales_data",
    transformation_ctx="datasource0"
)

# Convert to DataFrame to perform data transformations
df = datasource0.toDF()

# Change the data type of the 'Date' column to DateType (assuming 'dd/MM/yyyy' format)
df = df.withColumn('Date', to_date(col('Date'), 'dd/MM/yyyy'))

# Convert the date to 'YYYY-MM-DD' format
df = df.withColumn('Date', date_format(col('Date'), 'yyyy-MM-dd'))

# Convert the 'IsHoliday' column to 1 for true and 0 for false
df = df.withColumn('IsHoliday', when(col('IsHoliday') == 'True', 1).otherwise(0))

# Drop duplicates if necessary
df = df.dropDuplicates()

# Repartition the DataFrame to a single partition for easier handling
df = df.coalesce(1)

# Convert back to DynamicFrame
final_data = DynamicFrame.fromDF(df, glueContext, "final_data")

# Write the transformed data to an S3 bucket as a CSV file
glueContext.write_dynamic_frame.from_options(
    frame=final_data,
    connection_type="s3",
    connection_options={"path": "s3://mergedsalesdata/"},
    format="csv"
)

# Commit the job
job.commit()
